Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.8.15/x64/lib/python3.8/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.8.15/x64/lib/python3.8/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.8.15/x64/lib/python3.8/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/hostedtoolcache/Python/3.8.15/x64/lib/python3.8/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/opt/hostedtoolcache/Python/3.8.15/x64/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.8.15/x64/lib/python3.8/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.8.15/x64/lib/python3.8/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.8.15/x64/lib/python3.8/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import torch.nn.functional as F

torch.manual_seed(SEED)
np.random.seed(SEED)

if torch.cuda.is_available():
    device = torch.device("cuda")
else:
    device = torch.device("cpu")


# First CNN model with 2 convolutional layer and 2 fully connected layer
class CNN_1(nn.Module):
    def __init__(self):
        super(CNN_1, self).__init__()
        self.conv1 = nn.Conv2d(1, 4, 5)  # 4X24X24
        self.pool1 = nn.MaxPool2d(2, 2)  # 4X12X12
        self.conv2 = nn.Conv2d(4, 8, 5)  # 8X8X8
        self.pool2 = nn.MaxPool2d(2, 2)  # 8X4X4

        self.fc1 = nn.Linear(8 * 4 * 4, 80)
        self.fc2 = nn.Linear(80, 4)

    def forward(self, x):
        x = self.pool1(F.relu(self.conv1(x)))  # applying pooling to 1st conv
        x = self.pool2(F.relu(self.conv2(x)))  # applying pooling to the 2nd conv
        x = x.view(-1, 8 * 4 * 4)  # connecting conv with fc
        x = F.relu(self.fc1(x))
        x = self.fc2(x)
        output = F.log_softmax(x, dim=1)  # applyig log softmax to the output
        return output


myCNN = CNN_1().to(device)
optimizer = torch.optim.SGD(model.parameters(), lr=0.01, momentum=0.5)
criterion = nn.CrossEntropyLoss()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[34], line 35[0m
[1;32m     31[0m         [38;5;28;01mreturn[39;00m output
[1;32m     34[0m myCNN [38;5;241m=[39m CNN_1()[38;5;241m.[39mto(device)
[0;32m---> 35[0m optimizer [38;5;241m=[39m torch[38;5;241m.[39moptim[38;5;241m.[39mSGD([43mmodel[49m[38;5;241m.[39mparameters(), lr[38;5;241m=[39m[38;5;241m0.01[39m, momentum[38;5;241m=[39m[38;5;241m0.5[39m)
[1;32m     36[0m criterion [38;5;241m=[39m nn[38;5;241m.[39mCrossEntropyLoss()

[0;31mNameError[0m: name 'model' is not defined
NameError: name 'model' is not defined

